// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "./SCPNSBase.sol";
import "./interface/ISCPNSComputilityUnit.sol";
import "./interface/ISCPNSComputilityVM.sol";


contract SCPNSComputilityVM is
   SCPNSBase,
   ISCPNSComputilityVM 
   {
     using CountersUpgradeable for CountersUpgradeable.Counter;

     address public computilityUnitAddr;
     ISCPNSComputilityUnit internal _computilityUnitIf;

    function initialize(address computilityUnitAddr_) public virtual initializer {
        __SCPNSBase_init("SCPNSComputilityVM", "SCPNSComputilityVM", "");
        __SCPNSComputilityVM_init(computilityUnitAddr_);
    }
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     */
    function __SCPNSComputilityVM_init(address contract_) internal initializer {
        __SCPNSComputilityVM_init_unchained(contract_);
    }

    function __SCPNSComputilityVM_init_unchained(address contract_) internal initializer {
        _unitType("computilityvm");
        computilityUnitAddr = contract_;
        _computilityUnitIf = ISCPNSComputilityUnit(contract_);
    }






     uint256[48] private __gap;
   }


