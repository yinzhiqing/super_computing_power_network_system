
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "./SCPNSBase.sol";
import "./interface/ISCPNSComputilityUnit.sol";
import "./interface/ISCPNSTypeUnit.sol";

/**
 * @dev {SCPNSComputilityUnit} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract SCPNSComputilityUnit is 
    SCPNSBase,
    ISCPNSComputilityUnit
    {

    // typeUnit contract address 
    address public typeUnitAddr;
    address public computilityVMAddr;

    ISCPNSTypeUnit internal _typeUnitIf;

    /**
    *  @dev storage struct
    *  
    * owner => [index => id]
    *                     |-=> typeUnitCount
    *                     |-=> unitTypeId   
    *                            |-=> countOfOwner
    *                            |-=> allCount
    *                     |-=> idIndex 
    *                     |-=> owner
    *                            |-=> balance
    */

    // Mapping from id to typeUnit id
    mapping (uint256 => uint256) internal _id2TypeUnitId;
    // Mapping from id to typeUnit Count(typeUnitId to count) id => (typeUnitId => 10)
    mapping (uint256 => uint256) internal _id2TypeUnitCount;
    // Mapping from id to locked count
    mapping (uint256 => uint256) internal _id2LockedCount;
    // Mapping from typeUnit id to count(all)
    mapping (uint256 => uint256) internal _typeUnit2Count;
    // Mapping from owner to typeUnitId count
    mapping (address => mapping (uint256 => uint256)) internal _ownedTypeUnitCount;
    // Mapping from owner to locked typeUnitId count 
    mapping (address => mapping (uint256 => uint256)) internal _ownedTypeUnitCountLocked;

    function initialize(address typeUnitAddr_) public virtual initializer {
        __SCPNSBase_init("SCPNSComputilityUnit", "SCPNSComputilityUnit", "");
        __SCPNSComputilityUnit_init(typeUnitAddr_);
    }
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     */
    function __SCPNSComputilityUnit_init(address typeUnitAddr_) internal initializer {
        __SCPNSComputilityUnit_init_unchained(typeUnitAddr_);
    }

    function __SCPNSComputilityUnit_init_unchained(address typeUnitAddr_) internal initializer {
        _unitType("computilityunit");
        typeUnitAddr = typeUnitAddr_;
        _typeUnitIf = ISCPNSTypeUnit(typeUnitAddr_);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be tokenId
     * URI autogenerated based on the base URI passed at construction.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 tokenId, uint256 typeUnitId, uint256 typeUnitCount_, string memory datas) public virtual override {

        require(_typeUnitIf.exists(typeUnitId), "SCPNSComputilityUnit: typeUnitId is not exists.");
        require(typeUnitCount_ > 0, "SCPNSComputilityUnit: The typeUnit quantity value must be greater than 0");

        bytes32 _name = bytes32(tokenId);
        _mint(to, tokenId, _name, datas);

        _id2TypeUnitCount[tokenId] = typeUnitCount_;
        _ownedTypeUnitCount[to][typeUnitId] += typeUnitCount_;
        _ownedTypeUnitCountLocked[to][typeUnitId] = 0;
        

        _id2LockedCount[tokenId] = 0;
        _id2TypeUnitId[tokenId] = typeUnitId;
        // all count of typeUnitId
        _typeUnit2Count[typeUnitId] += typeUnitCount_;

    }

    function updateTypeUnit(address contract_) public virtual override {
        require(hasRole(MANAGE_ROLE, _msgSender()), "SCPNSProofParameter: must have manager role to add");
        require(contract_ != address(0), "SCPNSProofParameter: contract address is invalid address.");

        typeUnitAddr = contract_;
        _typeUnitIf = ISCPNSTypeUnit(contract_);
    }

    function updateComputilityVM(address contract_) public virtual override {
        require(hasRole(MANAGE_ROLE, _msgSender()), "SCPNSProofParameter: must have manager role to add");
        require(contract_ != address(0), "SCPNSProofParameter: contract address is invalid address.");

        computilityVMAddr = contract_;
    }

    function typeUnitIdOf(uint256 tokenId) public view virtual override returns(uint256) {
        return _id2TypeUnitId[tokenId];
    }

    function countOfTypeUnit(uint256 tokenId) public view virtual override returns(uint256) {
        return _typeUnit2Count[tokenId];
    }

    function typeUnitCountOf(uint256 tokenId) public view virtual override returns(uint256) {
        uint256 typeUnitCount = _id2TypeUnitCount[tokenId];
        return typeUnitCount;
    }
    
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
        } else if (from != to) {
            _removeTokenFromOwner(from, tokenId);
        }
        if (to == address(0)) {
        } else if (to != from) {
        }
    }
    function _removeTokenFromOwner(address from, uint256 tokenId) private {

        uint256 typeUnitCount = _id2LockedCount[tokenId];
        uint256 typeUnitId = _id2TypeUnitId[tokenId];
        _ownedTypeUnitCount[from][typeUnitId] -= typeUnitCount;

        delete _id2TypeUnitCount[tokenId];
        delete _id2LockedCount[tokenId];
    }

    function _burn(uint256 tokenId) internal virtual override(SCPNSBase) {
        super._burn(tokenId);

        // Update all count of typeUnit
        uint256 typeUnitCount = _id2TypeUnitCount[tokenId];
        _typeUnit2Count[_id2TypeUnitId[tokenId]] -= typeUnitCount;
    
        delete _id2TypeUnitId[tokenId];
        delete _id2LockedCount[tokenId];
    }

    uint256[48] private __gap;
}
