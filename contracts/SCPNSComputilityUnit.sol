
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "./SCPNSBase.sol";
import "./interface/ISCPNSComputitlityUnit.sol";
import "./interface/ISCPNSTypeUnit.sol";

/**
 * @dev {SCPNSComputilityUnit} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract SCPNSComputilityUnit is 
    SCPNSBase,
    ISCPNSComputilityUnit
    {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    // typeUnit contract address 
    address public typeUnitAddr;

    ISCPNSTypeUnit internal _typeUnitIf;

    /**
    *  @dev storage struct
    *  
    * owner => [index => id]
    *                     |-=> count
    *                     |-=> unitTypeId   
    *                            |-=> countOfOwner
    *                            |-=> allCount
    *                     |-=> idIndex 
    *                     |-=> owner
    *                            |-=> balance
    */

    // Mapping from id to typeUnit id
    mapping (uint256 => uint256) internal _id2TypeUnitId;
    // Mapping from id to id count
    mapping (uint256 => uint256) internal _id2Count;
    // Mapping from typeUnit id to id count(all)
    mapping (uint256 => uint256) internal _typeUnit2Count;
    // Mapping from owner to typeUnit list(index => typeUnitId) 
    mapping (address => mapping (uint256 => uint256)) internal _ownedTokens;
    // Mapping from id to typeUnit Count(typeUnitId to count) id => (typeUnitId => 10)
    mapping (uint256 => mapping (uint256 => uint256)) internal _ownedTokenTypeUnitCount;
    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;
    // Mapping from token ID to owner address
    mapping (uint256 => address) private _owners;
    // Mapping owner address to token count
    mapping (address => uint256) private _balances;

    function initialize(address typeUnitAddr_) public virtual initializer {
        __SCPNSBase_init("SCPNSComputilityUnit", "SCPNSComputilityUnit", "");
        __SCPNSComputilityUnit_init(typeUnitAddr_);
    }
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     */
    function __SCPNSComputilityUnit_init(address typeUnitAddr_) internal initializer {
        __SCPNSComputilityUnit_init_unchained(typeUnitAddr_);
    }

    function __SCPNSComputilityUnit_init_unchained(address typeUnitAddr_) internal initializer {
        _unitType("computilityunit");
        typeUnitAddr = typeUnitAddr_;
        _typeUnitIf = ISCPNSTypeUnit(typeUnitAddr_);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be tokenId
     * URI autogenerated based on the base URI passed at construction.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 tokenId, uint256 count_, uint256 typeUnitId, uint256 typeUnitCount_, string memory datas) public virtual override {

        require(_typeUnitIf.exists(typeUnitId), "SCPNSComputilityUnit: typeUnitId is not exists.");
        require(count_ > 0, "SCPNSComputilityUnit: The token quantity value must be greater than 0");
        require(typeUnitCount_ > 0, "SCPNSComputilityUnit: The typeUnit quantity value must be greater than 0");

        bytes32 _name = bytes32(tokenId);
        _mint(tokenId, _name, datas);

        uint256 length = SCPNSComputilityUnit.balanceOf(to);
        _ownedTokenTypeUnitCount[tokenId][typeUnitId] = count_;
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
        _owners[tokenId] = to;
        
        _balances[to] += 1;

        _id2Count[tokenId] = count_;
        _id2TypeUnitId[tokenId] = typeUnitId;
        _typeUnit2Count[typeUnitId] = typeUnitCount_ * count_;

        UpdateDatas(tokenId, _name, _msgSender(), datas);
    }

    function burn(uint256 tokenId) public virtual override(SCPNSBase, ISCPNSComputilityUnit) {
        _removeTokenFromOwner(_owners[tokenId], tokenId);

        // Update all count of typeUnit
        uint256 typeUnitCount = _ownedTokenTypeUnitCount[tokenId][_id2TypeUnitId[tokenId]];
        _typeUnit2Count[_id2TypeUnitId[tokenId]] -= typeUnitCount * _id2Count[tokenId];

        _balances[_owners[tokenId]] -= 1;
        delete _owners[tokenId];
        delete _id2TypeUnitId[tokenId];
        delete _id2Count[tokenId];

        _burn(tokenId);
    }

    function updateTypeUnit(address contract_) public virtual override {
        require(hasRole(MANAGE_ROLE, _msgSender()), "SCPNSProofParameter: must have manager role to add");
        require(contract_ != address(0), "SCPNSProofParameter: contract address is invalid address.");

        typeUnitAddr = contract_;
        _typeUnitIf = ISCPNSTypeUnit(contract_);
    }
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "SCPNSComputilityUnit: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IZXX-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "SCPNSComputilityUnit: owner query for nonexistent token");
        return owner;
    }

    function typeUnitIdOf(uint256 tokenId) public view virtual override returns(uint256) {
        return _id2TypeUnitId[tokenId];
    }

    function countOfTypeUnit(uint256 tokenId) public view virtual override returns(uint256) {
        return _typeUnit2Count[tokenId];
    }

    function countOf(uint256 tokenId) public view virtual override returns(uint256) {
        return _id2Count[tokenId];
    }
    
    function _removeTokenFromOwner(address from, uint256 tokenId) private {
        uint256 lastTokenIndex = SCPNSComputilityUnit.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
        delete _ownedTokenTypeUnitCount[tokenId][_id2TypeUnitId[tokenId]];
    }
    uint256[48] private __gap;
}
