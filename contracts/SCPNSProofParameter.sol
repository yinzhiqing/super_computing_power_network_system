// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "./SCPNSBase.sol";
import "./interface/ISCPNSTypeUnit.sol";
import "./interface/ISCPNSProofParameter.sol";
import "./ContractProject.sol";

/**
 * @dev {SCPNSProofParameter} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract SCPNSProofParameter is 
    SCPNSBase,
    ContractProject,
    ISCPNSProofParameter
    {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    // Mapping from id to parameter list
    mapping (uint256 => string) private _id2Parameters;
    // Mapping typeUnitId to rate of per
    mapping (uint256 => uint256) private _typeUnitRate;
    // default id
    uint256 private _defaultId;

    function initialize(address dns) public virtual initializer {
        __SCPNSBase_init("SCPNSProofParameter", "SCPNSProofParameter", "");
        __ContractProject_init(dns);
        __SCPNSProofParameter_init();
    }
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     */
    function __SCPNSProofParameter_init() internal initializer {
        __SCPNSProofParameter_init_unchained();
    }

    function __SCPNSProofParameter_init_unchained() internal initializer {
        _unitType("types");
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be tokenId
     * URI autogenerated based on the base URI passed at construction.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(uint256 tokenId, bytes32 name_, string memory parameter, string memory datas) public virtual override whenNotPaused {
        require(bytes(parameter).length > 0,  "SCPNSProofParameter: parameter is empty");

        _mint(_msgSender(), tokenId, name_, datas);

        if (_defaultId == uint256(0)) {
            _defaultId = tokenId;
        }
        _id2Parameters[tokenId] = parameter;


    }

    function setDefaultToken(uint256 tokenId) public virtual override whenNotPaused {
        require(hasRole(MINTER_ROLE, _msgSender()) || _msgSender() == super.ownerOf(tokenId), "SCPNSBase: must have minter role to set, or have manager role");

        require(_exists(tokenId), "SCPNSProofParameter: token is nonexists.");

        _defaultId = tokenId;
    }


    function parameterOf(uint256 tokenId) public view override returns(string memory) {
        return _id2Parameters[tokenId];
    }

    function defaultToken() public view virtual override returns(uint256) {
        return _defaultId;
    }

    function selectParameterId(uint256 typeUnitId, uint256 typeUnitCount) public view virtual override returns(uint256) {
        if (typeUnitId > 0 && typeUnitCount > 0) {
            return _defaultId;
        }
        return _defaultId;
    }

    function _burn(uint256 tokenId) internal virtual override(SCPNSBase) {
        require(false, "SCPNSProofParameter: can't burn anyone token");
        require(_exists(tokenId), "SCPNSProofParameter: token is noexists");
    }

    uint256[48] private __gap;
}
