// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

/**
 * @dev {SCPNSUnitBase} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract SCPNSUnitBase is 
    Initializable, 
    AccessControlEnumerableUpgradeable, 
    PausableUpgradeable
    {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant MANAGE_ROLE = keccak256("MANAGE_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    string public name;
    string public symbol;
    string public baseURI;

    string public unitType;

    // Mapping  from token to datas
    mapping (uint256 => string) internal _tokenDatas;
    // Mapping from name to id
    mapping (bytes32 => uint256) internal _name2IDs;
    // Mapping from id to name
    mapping (uint256 => bytes32) internal _id2Names;

    // Array with all token ids, used for enumeration
    uint256[] internal _allTokens;

    event UpdateDatas(uint256 indexed tokenId, bytes32 tokenName, address sender, string data);

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     */
    function __SCPNSUnitBase_init(string memory name_, string memory symbol_, string memory baseURI_) internal initializer {
        __Pausable_init_unchained();
        __AccessControlEnumerable_init_unchained();
        __SCPNSUnitBase_init_unchained(name_, symbol_, baseURI_);
    }

    function __SCPNSUnitBase_init_unchained(string memory name_, string memory symbol_, string memory baseURI_) internal initializer {
        baseURI= baseURI_;
        name = name_;
        symbol = symbol_;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(MANAGE_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be tokenId
     * URI autogenerated based on the base URI passed at construction.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(uint256 tokenId, bytes32 name_, string memory datas) public virtual {
        _mint(tokenId, name_, datas);

        UpdateDatas(tokenId, name_, _msgSender(), datas);
    }

    /**
      * @dev Update datas of token
      *
    */
    function update(uint256 tokenId, string memory datas) public virtual {

        _update(tokenId, datas);
        UpdateDatas(tokenId, _id2Names[tokenId], _msgSender(), datas);
    }
    /**
     * @dev Pauses all token transfers.
     *
     * See {Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "SCPNSUnitBase: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "SCPNSUnitBase: must have pauser role to unpause");
        _unpause();
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    /**
      * @dev token datas
    */
    function datasOf(uint256 tokenId) public view virtual returns(string memory) {
        return _tokenDatas[tokenId];
    }

    /**
      * @dev token name
    */
    function nameOf(uint256 tokenId) public view virtual returns(bytes32) {
        return _id2Names[tokenId];
    }

    /**
      * @dev token id
    */
    function tokenIdOf(bytes32 name_) public view virtual returns(uint256) {
        return _name2IDs[name_];
    }

    /**
      * @dev count
    */
    function countOf() public view virtual returns(uint256 count) {
        return _allTokens.length;
    }

    function tokenOfByIndex(uint256 index) public view virtual returns(uint256) {
        require(index < _allTokens.length, "SCPNSUnitBase: index out of bounds.");
        return _allTokens[index];
    }
    
    function burn(uint256 tokenId) 
    public
    virtual 
    {
        _burn(tokenId);
    }

    function _unitType(string memory unitType_) internal virtual {
        unitType = unitType_;
    }

    function exists(uint256 tokenId)
    public
    virtual
    returns(bool) {
        return _exist(tokenId);
    }

    function _mint(uint256 tokenId, bytes32 name_, string memory datas) 
    internal
    virtual 
    {
        require(hasRole(MINTER_ROLE, _msgSender()), "SCPNSUnitBase: must have minter role to mint");
        require(_name2IDs[name_] == uint256(0), "SCPNSUnitBase: token name is exists.");
        require(_id2Names[tokenId] == bytes32(0), "SCPNSUnitBase: tokenId is exists.");

        _name2IDs[name_] = tokenId;
        _id2Names[tokenId] = name_;
        _tokenDatas[tokenId] = datas;
        _allTokens.push(tokenId);
    }

    function _burn(uint256 tokenId) 
    internal
    virtual 
    {
        delete _tokenDatas[tokenId];

        bytes32 name_ = _id2Names[tokenId];
        delete _name2IDs[name_];
        delete _id2Names[tokenId];

        for(uint i = 0; i < _allTokens.length; i++) {
            if (tokenId == _allTokens[i]) {
                delete _allTokens[i];
                break;
            }
        }
    }

    function _update(uint256 tokenId, string memory datas) internal virtual {
        require(hasRole(MANAGE_ROLE, _msgSender()), "SCPNSUnitBase: must have manager role to mint");
        require(_id2Names[tokenId] != bytes32(0), "tokenId is invalid.");

        _tokenDatas[tokenId] = datas;

    }
    
    function _exist(uint256 tokenId) internal view returns(bool) {
        return _id2Names[tokenId] != bytes32("");
    }
    uint256[48] private __gap;
}
