// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract SingleLogoToken is 
    Initializable, 
    ContextUpgradeable, 
    AccessControlEnumerableUpgradeable, 
    ERC721EnumerableUpgradeable, 
    ERC721BurnableUpgradeable, 
    ERC721PausableUpgradeable
    {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    string private _baseTokenURI;
    address private _tokenManager;

    // Mapping  from interface to state
    mapping (string => bool) private _interfaces;
    // Mapping  from token to datas
    mapping (uint256 => string) private _tokenDatas;

    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public virtual initializer {
        __SingleLogoToken_init(name, symbol, baseTokenURI);
    }
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function __SingleLogoToken_init(string memory name, string memory symbol, string memory baseTokenURI) internal initializer {
        __Context_init_unchained();
        __ERC165_init_unchained();
        __AccessControl_init_unchained();
        __AccessControlEnumerable_init_unchained();
        __ERC721_init_unchained(name, symbol);
        __ERC721Enumerable_init_unchained();
        __ERC721Burnable_init_unchained();
        __Pausable_init_unchained();
        __ERC721Pausable_init_unchained();
        __SingleLogoToken_init_unchained(baseTokenURI);
    }

    function __SingleLogoToken_init_unchained(string memory baseTokenURI) internal initializer {
        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
        _tokenManager = _msgSender();
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be tokenId
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 tokenId, string memory datas) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "SingleLogoToken: must have minter role to mint");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _safeMint(to, tokenId);

        _afterMint(tokenId, datas);
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "SingleLogoToken: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "SingleLogoToken: must have pauser role to unpause");
        _unpause();
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    /**
      * @dev token manager 
    */
    function tokenManager() public view virtual returns(address) {
        return _tokenManager;
    }

    /**
      * @dev token datas
    */
    function datasOf(uint256 tokenId) public view virtual returns(string memory) {
        return _tokenDatas[tokenId];
    }

    /**
     * @dev updateManager
     *
     * Requirements:
     *
     * - the caller must have the `DEFAULT_ADMIN_ROLE`.
     */
    function updateTokenManager(address manager) public virtual {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "SingleLogoToken: must have admin role to grant");
        require(!paused(), "SingleLogoToken: token transfer while paused");
        require(_tokenManager != manager, "SingleLogoToken: this manager already exists.");

        _tokenManager = manager;
    }

/***************************************************************************************************
*                  internal functions                           
***************************************************************************************************/

    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId, batchSize);
    }

    function _burn(uint256 tokenId) 
    internal 
    virtual 
    override 
    {
        super._burn(tokenId);
        delete _tokenDatas[tokenId];
    }

    function _afterMint(uint256 tokenId, string memory datas)
    internal
    virtual
    {
        _tokenDatas[tokenId] = datas;

        _approve(_tokenManager, tokenId);
    }

    function _checkInterface(string memory api)
    internal
    virtual
    {
        require(_interfaces[api], "interface is closed.");
    }

    function _SetInterface(string memory api, bool state)
    internal
    virtual
    {
        _interfaces[api] = state;
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * use to if _tokenManager is 0x0
     * use _tokenManager if _tokenManager is't 0x0
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual override{
        // set to address as approve address to when to != address(0)
        // other set _tokenmanager as approve address
        if (to != address(0)) {
            super._approve(to, tokenId);
        } else {
            super._approve(_tokenManager, tokenId);
        }
    }

    uint256[48] private __gap;
}
